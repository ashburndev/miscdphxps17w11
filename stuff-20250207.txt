6:43 AM 2/7/2025

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

Microsoft Windows [Version 10.0.22631.4751]
(c) Microsoft Corporation. All rights reserved.

C:\Users\DavidHolberton>cd Documents\dir-stuff

C:\Users\DavidHolberton\Documents\dir-stuff>notepad stuff-20250207.txt

C:\Users\DavidHolberton\Documents\dir-stuff>code --version
1.96.4
cd4ee3b1c348a13bafd8f9ad8060705f6d4b9cba
x64

C:\Users\DavidHolberton\Documents\dir-stuff>code .

C:\Users\DavidHolberton\Documents\dir-stuff>

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

https://www.baeldung.com/spring-rest-openapi-documentation

https://springfox.github.io/springfox/docs/current/
https://springfox.github.io/springfox/docs/current/#dependencies

https://swagger.io/docs/
https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/

https://springdoc.org/
https://springdoc.org/migrating-from-springfox.html

Migrating from SpringFox

    Remove springfox and swagger 2 dependencies. Add springdoc-openapi-starter-webmvc-ui dependency instead.

   <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.8.4</version>
   </dependency>

    Replace swagger 2 annotations with swagger 3 annotations (it is already included with springdoc-openapi-starter-webmvc-ui dependency). Package for swagger 3 annotations is io.swagger.v3.oas.annotations.

        @Api → @Tag

        @ApiIgnore → @Parameter(hidden = true) or @Operation(hidden = true) or @Hidden

        @ApiImplicitParam → @Parameter

        @ApiImplicitParams → @Parameters

        @ApiModel → @Schema

        @ApiModelProperty(allowEmptyValue = true) → @Schema(nullable = true)

        @ApiModelProperty → @Schema

        @ApiOperation(value = "foo", notes = "bar") → @Operation(summary = "foo", description = "bar")

        @ApiParam → @Parameter

        @ApiResponse(code = 404, message = "foo") → @ApiResponse(responseCode = "404", description = "foo")

    This step is optional: Only if you have multiple Docket beans replace them with GroupedOpenApi beans.

Before:

  @Bean
  public Docket publicApi() {
      return new Docket(DocumentationType.SWAGGER_2)
              .select()
              .apis(RequestHandlerSelectors.basePackage("org.github.springshop.web.public"))
              .paths(PathSelectors.regex("/public.*"))
              .build()
              .groupName("springshop-public")
              .apiInfo(apiInfo());
  }

  @Bean
  public Docket adminApi() {
      return new Docket(DocumentationType.SWAGGER_2)
              .select()
              .apis(RequestHandlerSelectors.basePackage("org.github.springshop.web.admin"))
              .paths(PathSelectors.regex("/admin.*"))
              .apis(RequestHandlerSelectors.withMethodAnnotation(Admin.class))
              .build()
              .groupName("springshop-admin")
              .apiInfo(apiInfo());
  }

Now:

  @Bean
  public GroupedOpenApi publicApi() {
      return GroupedOpenApi.builder()
              .group("springshop-public")
              .pathsToMatch("/public/**")
              .build();
  }
  @Bean
  public GroupedOpenApi adminApi() {
      return GroupedOpenApi.builder()
              .group("springshop-admin")
              .pathsToMatch("/admin/**")
              .addOpenApiMethodFilter(method -> method.isAnnotationPresent(Admin.class))
              .build();
  }

If you have only one Docket — remove it and instead add properties to your application.properties:

springdoc.packagesToScan=package1, package2
springdoc.pathsToMatch=/v1, /api/balance/**

    Add bean of OpenAPI type. See example:

  @Bean
  public OpenAPI springShopOpenAPI() {
      return new OpenAPI()
              .info(new Info().title("SpringShop API")
              .description("Spring shop sample application")
              .version("v0.0.1")
              .license(new License().name("Apache 2.0").url("http://springdoc.org")))
              .externalDocs(new ExternalDocumentation()
              .description("SpringShop Wiki Documentation")
              .url("https://springshop.wiki.github.org/docs"));
  }

    If the swagger-ui is served behind a proxy:

        how-can-i-deploy-springdoc-openapi-starter-webmvc-ui-behind-a-reverse-proxy
        https://springdoc.org/index.html#how-can-i-deploy-springdoc-openapi-starter-webmvc-ui-behind-a-reverse-proxy

    To customise the Swagger UI

        how-can-i-configure-swagger-ui
        https://springdoc.org/index.html#how-can-i-configure-swagger-ui

    To hide an operation or a controller from documentation

        how-can-i-hide-an-operation-or-a-controller-from-documentation
        https://springdoc.org/index.html#how-can-i-hide-an-operation-or-a-controller-from-documentation

Last updated 2024-10-06 14:24:00 +0200

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

https://dinakaranramadurai.medium.com/migration-from-swagger-to-open-api-with-spring-boot-3-4a172db66e32

Migration from Swagger to open-api with Spring boot 3
Feb 11, 2023

If you are using Swagger-UI, it is time to switch to Spring Doc as swagger is a dead project. Swagger hasn’t had a release since July 2020. Even though it worked with spring boot 2.x, it won't work well for spring boot 3 as it has many breaking changes.

Migrating from swagger to open-api
What is SpringDoc-OpenAPI?

springdoc-openapi java library helps to automate the generation of API documentation using spring boot projects. Automatically generates documentation in JSON/YAML and HTML format APIs. This documentation can be completed by comments using swagger-api annotations.
Dependencies

Remove spring fox and swagger 2 dependencies. Add springdoc-openapi-ui dependency based on application type web MVC or web flux

<!-- provides springdoc-openapi-ui -->
<dependency>
   <groupId>org.springdoc</groupId>
   <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
   <version>2.0.2</version>
</dependency>
<dependency>
   <groupId>org.springdoc</groupId>
   <artifactId>springdoc-openapi-starter-webmvc-api</artifactId>
   <version>2.0.2</version>
 </dependency>

Replace swagger 2 annotations with swagger 3 annotations (it is already included with springdoc-openapi-ui dependency). Package for swagger 3 annotations is io.swagger.v3.oas.annotations.

@Api → @Tag
@ApiIgnore → @Parameter(hidden = true) or @Operation(hidden = true) or @Hidden
@ApiOperation(value = "foo", notes = "bar") → @Operation(summary = "foo", description = "bar")
@ApiParam → @Parameter

Configurations

API Info details — In swagger

//API info
private ApiInfo apiInfo() {
  return new ApiInfo("Micro service", "APIs for Test Console service", "1.0",
    "Terms of service",
    new Contact("Dev Team", "https://github.com", "dinakar14.ram@gmail.com"), "License of API",
    "API license URL", Collections.emptyList());
 }

In Spring Doc open-api

@Bean
 public OpenAPI springOpenAPI() {
  return new OpenAPI()
    .info(new Info().title("Micro service").description("APIs for Test Console service").version("1.0")
      .license(new License().name("Dev Team").url("https://github.com")))
    .externalDocs(new ExternalDocumentation().description("Test Documentation").url("https://github.com"));
 }

If you have multiple Docket beans replace them with GroupedOpenApi beans. In Swagger

@Bean
  public Docket publicApi() {
      return new Docket(DocumentationType.SWAGGER_2)
              .select()
              .apis(RequestHandlerSelectors.basePackage("com.dina.openapi.controller"))
              .paths(PathSelectors.ant("/api/**"))
              .build()
              .groupName("test-api")
              .apiInfo(apiInfo());
  }

In Spring Doc open-api

@Bean
 public GroupedOpenApi publicApi() {
  return GroupedOpenApi.builder().group("test-api").pathsToMatch("/api/**").build();
 }

If you have only one docket, you can add the below in the application.properties

springdoc.packagesToScan=com.dina.openapi.controller
springdoc.pathsToMatch=/api/**

Authorization

In Swagger

@Bean
 public Docket api() {

  return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())
    .securityContexts(Arrays.asList(securityContext())).securitySchemes(Arrays.asList(apiKey())).select()
    .apis(RequestHandlerSelectors.basePackage("com.dina.openapi.controller"))
    .paths(PathSelectors.ant("/api/**")).build();
 }

private ApiKey apiKey() {
  return new ApiKey("apiKey", "Authorization", "header");
 }

 private SecurityContext securityContext() {
  return SecurityContext.builder().securityReferences(defaultAuth()).build();
 }

 private List<SecurityReference> defaultAuth() {
  return Arrays.asList(new SecurityReference("apiKey", new AuthorizationScope[0]));
 }

In spring Doc open api

@Bean
 public OpenAPI customizeOpenAPI() {
  final String securitySchemeName = "bearerAuth";
  return new OpenAPI()
    .addSecurityItem(new SecurityRequirement().addList(securitySchemeName))
          .components(
              new Components()
                  .addSecuritySchemes(securitySchemeName,
                      new SecurityScheme()
                          .name(securitySchemeName)
                          .type(SecurityScheme.Type.HTTP)
                          .scheme("bearer")
                          .bearerFormat("JWT")
                  )
          );
 }

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

